name: release-flow
on:
  create:
    branches: ['release/*','hotfix/*']
  push:
    branches: ['release/*','hotfix/*']

concurrency:
  group: rel-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE: ${{ github.repository_owner }}/semantic-versioning-poc

jobs:
  flow:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '24' }

      - name: detect new release branch
        id: mode
        run: echo "create=$([[ '${{ github.event_name }}' == 'create' ]] && echo 1 || echo 0)" >>"$GITHUB_OUTPUT"

      # -- anchor: bump X.Y.0 + tag base
      - name: bump X.Y.0 + tag base
        if: steps.mode.outputs.create == '1'
        run: |
          BR=${GITHUB_REF_NAME}; VER=${BR#*/}; KIND=${BR%%/*}
          mvn -q versions:set -DnewVersion="$VER" -DprocessAllModules=true -DgenerateBackupPoms=false
          mvn -q versions:commit
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: init $VER"
          git tag -a "$KIND-base/$VER" -m anchor
          git push --follow-tags

      - name: sync branch with remote
        if: steps.mode.outputs.create == '0'
        run: |
          git fetch origin $GITHUB_REF_NAME --tags --quiet
          git merge --ff-only origin/$GITHUB_REF_NAME

      # -- build / patch bump (pushes)
      - name: bump patch version
        if: steps.mode.outputs.create == '0'
        id: ver
        run: |
          BR=${GITHUB_REF_NAME}; BASE=${BR#*/}; KIND=${BR%%/*}
          git fetch --tags --quiet
          COUNT=$(git rev-list --count "$KIND-base/$BASE..HEAD")
          MAJOR=${BASE%%.*}; MINOR=$(echo $BASE|cut -d. -f2)
          echo "exp=$MAJOR.$MINOR.$COUNT" >>"$GITHUB_OUTPUT"

      - name: bump pom.xml
        if: steps.mode.outputs.create == '0'
        id: sync
        run: |
          EXP=${{ steps.ver.outputs.exp }}
          CUR=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate)
          if [ "$CUR" != "$EXP" ]; then
            mvn -q versions:set -DnewVersion="$EXP" -DprocessAllModules=true -DgenerateBackupPoms=false
            mvn -q versions:commit
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -am "chore(version): $EXP [skip ci]"
            git push
          fi

      - name: build jar (skip tests)
        if: steps.mode.outputs.create == '0'
        run: mvn -B -DskipTests package

      - uses: docker/login-action@v3
        if: steps.mode.outputs.create == '0'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        if: steps.mode.outputs.create == '0'
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.ver.outputs.exp }}
