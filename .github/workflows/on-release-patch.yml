name: on-release-patch
on:
  workflow_run:
    workflows: ["on-new-release-push"]
    branches: ['release/*','hotfix/*']
    types: [completed]
  push:
    branches: ['release/*','hotfix/*']

permissions:
  contents: write
  packages: write
concurrency:
  group: rel-${{ github.event.workflow_run.head_branch || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE: ${{ github.repository_owner }}/semantic-versioning-poc
  BRANCH_NAME: ${{ github.ref_name || github.event.workflow_run.head_branch }}

jobs:
  build:
    # no push inicial do anchor: o commit tem [skip ci] → não entra aqui
    if: |
      github.event_name == 'workflow_run' ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]'))
    runs-on: ubuntu-latest
    steps:
      # checkout correto para cada evento
      - name: Checkout (workflow_run)
        if: github.event_name == 'workflow_run'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Checkout (push)
        if: github.event_name == 'push'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '24' }

      # garantir FF com remoto (evita non-fast-forward)
      - name: Sync branch (FF)
        shell: bash
        run: |
          set -e
          BR="${BRANCH_NAME}"
          git fetch origin "$BR" --tags --quiet
          git merge --ff-only "origin/$BR" || true

      # calcular X.Y.N (desde a âncora)
      - name: Compute expected X.Y.N
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          BR="${BRANCH_NAME}"                  # release/1.10.0
          BASE="${BR#*/}"                      # 1.10.0
          KIND="${BR%%/*}"                     # release|hotfix

          git fetch --tags --quiet
          # garante existência da âncora (se não, termina sem erro)
          git rev-parse -q --verify "refs/tags/${KIND}-base/${BASE}" >/dev/null || { echo "anchor not found; exiting"; echo "skip=1" >>"$GITHUB_OUTPUT"; exit 0; }

          COUNT=$(git rev-list --count "${KIND}-base/${BASE}..HEAD")
          MAJOR="${BASE%%.*}"
          MINOR="$(echo "$BASE" | cut -d. -f2)"
          echo "expected=$MAJOR.$MINOR.$COUNT" >>"$GITHUB_OUTPUT"
          echo "skip=0" >>"$GITHUB_OUTPUT"

      - name: Exit if no anchor yet
        if: steps.ver.outputs.skip == '1'
        run: echo "Skipped."

      # bump pom.xml para X.Y.N (se necessário)
      - name: Sync pom.xml
        if: steps.ver.outputs.skip == '0'
        id: sync
        shell: bash
        run: |
          set -euo pipefail
          EXP="${{ steps.ver.outputs.expected }}"
          CUR=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate)
          if [ "$CUR" != "$EXP" ]; then
            mvn -q versions:set -DnewVersion="$EXP" -DprocessAllModules=true -DgenerateBackupPoms=false
            mvn -q versions:commit
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -am "chore(version): $EXP [skip ci]"
            git push
            echo "changed=1" >>"$GITHUB_OUTPUT"
          else
            echo "changed=0" >>"$GITHUB_OUTPUT"
          fi

      - name: Build JAR
        if: steps.ver.outputs.skip == '0'
        run: mvn -B -DskipTests package

      - name: Login GHCR
        if: steps.ver.outputs.skip == '0'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image X.Y.N
        if: steps.ver.outputs.skip == '0'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.ver.outputs.expected }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.version=${{ steps.ver.outputs.expected }}
