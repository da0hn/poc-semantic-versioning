name: Increment Version on Commit
on:
  push:
    branches: [ 'release/**', 'hotfix/**' ]
permissions:
  contents: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Auto-recover missing anchor and calculate version
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"            # release/1.3.0 ou hotfix/1.3.1
          BASE_VERSION="${BRANCH#*/}"            # 1.3.0
          KIND="${BRANCH%%/*}"                   # release|hotfix
          
          BASE_TAG="$KIND-base/$BASE_VERSION"
          
          # üîç Verifica se a tag √¢ncora existe
          if ! git rev-parse "$BASE_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Anchor tag $BASE_TAG not found. Attempting auto-recovery..."
            
            # üîß ESTRAT√âGIA 1: Procura por commit de sincroniza√ß√£o
            SYNC_COMMIT=$(git log --oneline --grep="chore: sync version to $BASE_VERSION" -n 1 --format="%H" || echo "")
            
            if [[ -n "$SYNC_COMMIT" ]]; then
              echo "üéØ Found sync commit: $SYNC_COMMIT"
              echo "üè∑Ô∏è Creating missing anchor tag at sync commit..."
              
              git tag -a "$BASE_TAG" "$SYNC_COMMIT" -m "Auto-recovered anchor for $BRANCH

              Base version: $BASE_VERSION
              Created from sync commit: $SYNC_COMMIT
              This tag marks the starting point for incremental versioning."
              
              git push origin "$BASE_TAG"
              echo "‚úÖ Anchor tag auto-recovered successfully!"
              
            else
              # üîß ESTRAT√âGIA 2: Cria √¢ncora no primeiro commit da branch
              echo "üîÑ No sync commit found. Creating anchor at current commit..."
              
              # Verifica se a vers√£o do pom.xml bate com a branch
              CURRENT_POM_VERSION=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate 2>/dev/null)
              
              if [[ "$CURRENT_POM_VERSION" != "$BASE_VERSION" ]]; then
                echo "üîÑ Synchronizing pom.xml version first..."
                
                mvn -q versions:set -DnewVersion="$BASE_VERSION" -DprocessAllModules=true -DgenerateBackupPoms=false
                mvn -q versions:commit
                
                git add pom.xml
                git commit -m "chore: sync version to $BASE_VERSION (auto-recovery)

                - Branch: $BRANCH
                - Updated pom.xml from $CURRENT_POM_VERSION to $BASE_VERSION  
                - Auto-recovery: establishes base version for incremental releases"
                
                git push origin HEAD:"$BRANCH"
              fi
              
              # Cria √¢ncora no commit atual
              git tag -a "$BASE_TAG" -m "Auto-recovered anchor for $BRANCH

              Base version: $BASE_VERSION
              Created during auto-recovery process
              This tag marks the starting point for incremental versioning."
              
              git push origin "$BASE_TAG"
              echo "‚úÖ Anchor tag created during auto-recovery!"
            fi
          else
            echo "‚úÖ Anchor tag $BASE_TAG found."
          fi
          
          # üìä Calcula vers√£o incremental (agora a √¢ncora existe)
          MAJOR="${BASE_VERSION%%.*}"                    # 1
          MINOR="$(echo "$BASE_VERSION" | cut -d. -f2)"  # 3
          COUNT=$(git rev-list --count "$BASE_TAG..HEAD") # commits desde √¢ncora
          
          # Nova vers√£o incremental
          NEW_VERSION="$MAJOR.$MINOR.$COUNT"
          
          echo "üì¶ Base version: $BASE_VERSION"
          echo "üìà Commit count since anchor: $COUNT" 
          echo "üî¢ New version: $NEW_VERSION"
          
          # S√≥ atualiza se a vers√£o mudou
          CURRENT_VERSION=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate 2>/dev/null || echo "unknown")
          
          if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
            echo "üîÑ Updating version from $CURRENT_VERSION to $NEW_VERSION"
            
            mvn -q versions:set -DnewVersion="$NEW_VERSION" -DprocessAllModules=true -DgenerateBackupPoms=false
            mvn -q versions:commit
            
            git add pom.xml
            git commit -m "chore: bump version to $NEW_VERSION

            - Base version: $BASE_VERSION  
            - Commits since anchor: $COUNT
            - New incremental version: $NEW_VERSION"
            
            git push origin HEAD:"$BRANCH"
            echo "‚úÖ Version updated and pushed successfully"
          else
            echo "‚ÑπÔ∏è Version already up to date ($NEW_VERSION)"
          fi
