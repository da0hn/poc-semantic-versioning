name: Increment Version on Commit
on:
  push:
    branches: [ 'release/**', 'hotfix/**' ]
permissions:
  contents: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate and update version
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"            # release/1.3.0 ou hotfix/1.3.1
          BASE_VERSION="${BRANCH#*/}"            # 1.3.0
          KIND="${BRANCH%%/*}"                   # release|hotfix
          
          BASE_TAG="$KIND-base/$BASE_VERSION"
          
          # Verifica se a tag √¢ncora existe
          if ! git rev-parse "$BASE_TAG" >/dev/null 2>&1; then
            echo "‚ùå Anchor tag $BASE_TAG not found. Please create the branch properly."
            exit 1
          fi
          
          # Calcula vers√£o incremental
          MAJOR="${BASE_VERSION%%.*}"                    # 1
          MINOR="$(echo "$BASE_VERSION" | cut -d. -f2)"  # 3
          COUNT=$(git rev-list --count "$BASE_TAG..HEAD") # commits desde √¢ncora
          
          # Nova vers√£o incremental
          NEW_VERSION="$MAJOR.$MINOR.$COUNT"
          
          echo "üì¶ Base version: $BASE_VERSION"
          echo "üìà Commit count since anchor: $COUNT" 
          echo "üî¢ New version: $NEW_VERSION"
          
          # S√≥ atualiza se a vers√£o mudou
          CURRENT_VERSION=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate 2>/dev/null || echo "unknown")
          
          if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
            echo "üîÑ Updating version from $CURRENT_VERSION to $NEW_VERSION"
            
            mvn -q versions:set -DnewVersion="$NEW_VERSION" -DprocessAllModules=true -DgenerateBackupPoms=false
            mvn -q versions:commit
            
            git add pom.xml
            git commit -m "chore: bump version to $NEW_VERSION

            - Base version: $BASE_VERSION  
            - Commits since anchor: $COUNT
            - New incremental version: $NEW_VERSION"
            
            git push origin HEAD:"$BRANCH"
            echo "‚úÖ Version updated and pushed successfully"
          else
            echo "‚ÑπÔ∏è Version already up to date ($NEW_VERSION)"
          fi
