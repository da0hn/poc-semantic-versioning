name: Increment Version on Commit
on:
  push:
    branches: [ 'release/**', 'hotfix/**' ]
    paths-ignore:
      - 'CHANGELOG.md'  # Ignora commits de changelog

permissions:
  contents: write

jobs:
  increment-version:
    runs-on: ubuntu-latest
    # CRUCIAL: S√≥ executa se N√ÉO foi um commit do pr√≥prio bot
    if: >-
      ${{ 
        !contains(github.event.head_commit.message, 'chore: sync version to') && 
        !contains(github.event.head_commit.message, 'chore: bump version to') &&
        !contains(github.event.head_commit.message, 'docs(changelog)') 
      }}


    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate and increment version
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          BASE_VERSION="${BRANCH#*/}"
          KIND="${BRANCH%%/*}"
          
          BASE_TAG="$KIND-base/$BASE_VERSION"
          
          # Atualiza refer√™ncias remotas
          git fetch --tags --quiet
          
          # Verifica se a tag √¢ncora existe
          if ! git rev-parse "$BASE_TAG" >/dev/null 2>&1; then
            echo "‚ùå Anchor tag $BASE_TAG not found."
            echo "‚ÑπÔ∏è This might happen if the anchor creation workflow is still running."
            echo "‚ÑπÔ∏è Skipping version increment for now."
            exit 0
          fi
          
          echo "‚úÖ Anchor tag $BASE_TAG found."
          
          # Calcula vers√£o incremental
          MAJOR="${BASE_VERSION%%.*}"
          MINOR="$(echo "$BASE_VERSION" | cut -d. -f2)"
          COUNT=$(git rev-list --count "$BASE_TAG..HEAD")
          
          NEW_VERSION="$MAJOR.$MINOR.$COUNT"
          
          echo "üì¶ Base version: $BASE_VERSION"
          echo "üìà Commit count since anchor: $COUNT" 
          echo "üî¢ New version: $NEW_VERSION"
          
          # Verifica vers√£o atual
          CURRENT_VERSION=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate 2>/dev/null || echo "unknown")
          
          if [[ "$CURRENT_VERSION" != "$NEW_VERSION" ]]; then
            echo "üîÑ Updating version from $CURRENT_VERSION to $NEW_VERSION"
          
            mvn -q versions:set -DnewVersion="$NEW_VERSION" -DprocessAllModules=true -DgenerateBackupPoms=false
            mvn -q versions:commit
          
            git add pom.xml
            git commit -m "chore: bump version to $NEW_VERSION

            - Base version: $BASE_VERSION  
            - Commits since anchor: $COUNT
            - New incremental version: $NEW_VERSION"
          
            git push origin HEAD:"$BRANCH"
            echo "‚úÖ Version updated and pushed successfully"
          else
            echo "‚ÑπÔ∏è Version already up to date ($NEW_VERSION)"
          fi
