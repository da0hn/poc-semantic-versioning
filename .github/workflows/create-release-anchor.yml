name: Create Release Anchor
on:
  create:
    branches: [ 'release/**', 'hotfix/**' ]
permissions:
  contents: write

jobs:
  create-anchor-and-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync pom.xml version and create anchor
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          BRANCH_VERSION="${BRANCH#*/}"
          KIND="${BRANCH%%/*}"

          # Verifica versão atual do pom.xml
          CURRENT_POM_VERSION=$(mvn -q -DforceStdout -Dexpression=project.version -DnonRecursive=true help:evaluate 2>/dev/null)
          
          echo "🏷️ Branch: $BRANCH"
          echo "📋 Expected version: $BRANCH_VERSION" 
          echo "📄 Current pom.xml version: $CURRENT_POM_VERSION"
          
          # Se as versões não coincidem, atualiza o pom.xml
          if [[ "$CURRENT_POM_VERSION" != "$BRANCH_VERSION" ]]; then
            echo "🔄 Synchronizing pom.xml version to match branch..."

            mvn -q versions:set -DnewVersion="$BRANCH_VERSION" -DprocessAllModules=true -DgenerateBackupPoms=false
            mvn -q versions:commit

            git add pom.xml
            git commit -m "chore: sync version to $BRANCH_VERSION [skip-version]

            - Branch: $BRANCH
            - Updated pom.xml from $CURRENT_POM_VERSION to $BRANCH_VERSION
            - This establishes the base version for incremental releases"

            echo "✅ Version synchronized: $CURRENT_POM_VERSION → $BRANCH_VERSION"
          else
            echo "✅ Version already matches: $BRANCH_VERSION"
          fi

          # Cria tag âncora APÓS possível commit de sincronização
          BASE_TAG="$KIND-base/$BRANCH_VERSION"

          echo "🎯 Creating anchor tag: $BASE_TAG"
          git tag -a "$BASE_TAG" -m "Anchor for $BRANCH at creation

          Base version: $BRANCH_VERSION
          This tag marks the starting point for incremental versioning."

      # Empurra a TAG ÂNCORA antes de gerar o changelog (a action lê via API do GitHub)
      - name: Push anchor tag
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          KIND="${BRANCH%%/*}"
          BRANCH_VERSION="${BRANCH#*/}"
          BASE_TAG="$KIND-base/$BRANCH_VERSION"
          git push origin "$BASE_TAG"

      # Garante que o arquivo exista para não acionar o bug do "base" vazio
      - name: Prepare changelog file
        shell: bash
        run: |
          touch CHANGELOG.md

      # Calcula sinceTag e futureRelease em um passo simples
      - name: Compute changelog inputs
        id: cl
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"      # release/1.2.0 ou hotfix/1.2.1
          KIND="${BRANCH%%/*}"             # release|hotfix
          BASE_VER="${BRANCH#*/}"          # 1.2.0
          echo "since_tag=${KIND}-base/${BASE_VER}" >> "$GITHUB_OUTPUT"
          echo "future_release=${BASE_VER}" >> "$GITHUB_OUTPUT"

      - name: Generate initial changelog (github-changelog-generator)
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          user: ${{ github.repository_owner }}
          project: ${{ github.event.repository.name }}
          sinceTag: ${{ steps.cl.outputs.since_tag }}
          futureRelease: ${{ steps.cl.outputs.future_release }}
          output: CHANGELOG.md
          base: CHANGELOG.md
          issues: true
          pullRequests: true
          prWoLabels: true
          author: false
          unreleased: false
          compareLink: true

      - name: Commit and push everything
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          KIND="${BRANCH%%/*}"
          BRANCH_VERSION="${BRANCH#*/}"
          git add CHANGELOG.md || true
          if ! git diff --cached --quiet; then
            git commit -m "docs(changelog): initial changelog for $BRANCH [skip-version]"
          fi
          git push origin HEAD:"$BRANCH"
          
          echo "🚀 Setup completed successfully!"
          echo "   - Branch: $BRANCH"
          echo "   - Base version: $BRANCH_VERSION" 
          echo "   - Anchor tag: $BASE_TAG"
          echo "   - Initial changelog: Created"
