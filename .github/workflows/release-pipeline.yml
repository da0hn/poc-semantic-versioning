name: Release Pipeline
on:
  push:
    branches: [ 'release/**', 'hotfix/**' ]
    paths-ignore:
      - 'CHANGELOG.md'

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/semantic-versioning-poc

jobs:
  release-pipeline:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip-version]') }}

    steps:
      - uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # ETAPA 1: INCREMENTA VERS√ÉO
      - name: Increment version
        id: version
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          BASE_VERSION="${BRANCH#*/}"
          KIND="${BRANCH%%/*}"
          
          BASE_TAG="$KIND-base/$BASE_VERSION"
          
          git fetch --tags --quiet
          
          if ! git rev-parse "$BASE_TAG" >/dev/null 2>&1; then
            echo "‚ùå Anchor tag $BASE_TAG not found."
            echo "‚ÑπÔ∏è Skipping version increment."
            echo "has_anchor=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "has_anchor=true" >> "$GITHUB_OUTPUT"
          
          # Calcula vers√£o incremental Z
          MAJOR="${BASE_VERSION%%.*}"                    # 1
          MINOR="$(echo "$BASE_VERSION" | cut -d. -f2)"  # 3  
          PATCH="$(echo "$BASE_VERSION" | cut -d. -f3)"  # 0
          COUNT=$(git rev-list --count "$BASE_TAG..HEAD")
          
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + COUNT))"
          
          echo "üì¶ Base version: $BASE_VERSION"
          echo "üìà Commit count since anchor: $COUNT"
          echo "üî¢ New version: $NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          
          # Atualiza pom.xml
          mvn -q versions:set -DnewVersion="$NEW_VERSION" -DprocessAllModules=true -DgenerateBackupPoms=false
          mvn -q versions:commit
          
          git add pom.xml
          git commit -m "chore: bump version to $NEW_VERSION [skip-version]

          - Base version: $BASE_VERSION  
          - Commits since anchor: $COUNT
          - New incremental version: $NEW_VERSION"
          
          echo "‚úÖ Version incremented to $NEW_VERSION"

      # ETAPA 2: ATUALIZA CHANGELOG
      - name: Update changelog
        if: steps.version.outputs.has_anchor == 'true'
        uses: TriPSs/conventional-changelog-action@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          preset: angular
          output-file: CHANGELOG.md
          skip-bump: 'true'
          skip-tag: 'true'
          skip-version-file: 'true'
          release-count: '0'

      # ETAPA 3: COMMIT CHANGELOG
      - name: Commit changelog
        if: steps.version.outputs.has_anchor == 'true'
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          
          git add CHANGELOG.md
          
          if ! git diff --cached --quiet; then
            git commit -m "docs(changelog): update for $BRANCH [skip-version]"
            echo "üìù Changelog updated"
          else
            echo "‚ÑπÔ∏è No changelog changes"
          fi

      # ETAPA 4: BUILD JAR
      - name: Build JAR
        if: steps.version.outputs.has_anchor == 'true'
        run: mvn -B -DskipTests package

      # ETAPA 5: BUILD & PUSH DOCKER
      - name: Compute docker tag
        if: steps.version.outputs.has_anchor == 'true'
        id: docker_tag
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"
          echo "üê≥ Docker tag: $VERSION"

      - name: Login GHCR
        if: steps.version.outputs.has_anchor == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker
        if: steps.version.outputs.has_anchor == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.docker_tag.outputs.tag }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.docker_tag.outputs.tag }}

      # ETAPA 6: PUSH FINAL
      - name: Push all changes
        if: steps.version.outputs.has_anchor == 'true'
        shell: bash
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          git push origin HEAD:"$BRANCH"
          
          echo "üöÄ Release pipeline completed successfully!"
          echo "   - Branch: $BRANCH"
          echo "   - New version: $NEW_VERSION"
          echo "   - Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$NEW_VERSION"
